https://docs.oracle.com/javaee/7/firstcup/java-ee002.htm

https://github.com/in28minutes/MavenIn28Minutes/

-------------------------
	keyword: junit maven dependency
-------------------------

Goals:  help:effective-pom -Doutput=effective-pom.xml
	    help:effective-settings -Doutput=effective-settings.xml
--------------------------------
	Super POM
	>>>>>>>>>>>
	The Super POM is Maven's default POM. All POMs inherit from a parent or default (despite explicitly defined or not). 
	This base POM is known as the Super POM, and contains values inherited by default. Maven use the effective POM (configuration from super pom plus project configuration) to execute relevant goal.
	>>>>>>>>>>>
--------------------------------
--------------------------------
mvn -version
mvn clean install
mvn help:effective-pom
mvn tomcat7:run
---------------------------------
maven commands

http://tutorials.jenkov.com/maven/maven-commands.html

mvn clean package:	
	Clears the target directory and Builds the project and packages the resulting JAR file into the target directory.
	
----------------------------------
mvn clean install -rf :your-module
	:your-module : failed module
For example, if your build failed in myproject-proxy, you can use the following command:
mvn -rf hermes-service-print clean install

---------------------------------
skip test

 mvn -rf hermes-service-print clean install -Dmaven.test.skip=true
 mvn site:run -Phermes.rest.ui -Dmaven.test.skip=true
 >>>>>>>>>>>
	https://www.baeldung.com/maven-profiles
	First, we'll create a no-tests profile which sets the maven.test.skip property to true:

	<profile>
		<id>no-tests</id>
		<properties>
			<maven.test.skip>true</maven.test.skip>
		</properties>
	</profile>
	Next, we'll execute the profile by running the mvn package -Pno-tests command. Now the artifact is created and the tests are skipped. In this case the mvn package -Dmaven.test.skip command would have been easier.
	
	mvn package -P profile_id
>>>>>>>>>>>>>

---------------
life cycles
	https://maven.apache.org/ref/3.6.3/maven-core/lifecycles.html
	
	life cycles: default, clean, site
	phrases:  
		>>>> clean >>>
			pre-clean, clean, post-clean
			
	goals of clean plugin : clean-goal of clean plugin <-> clean-phrase of clean lifecycle
------------------
npm install -g bower

node should be less than 12.
npm install -g gulp-cli
npm install --save-dev gulp

-------------
	AXIS WSDL CODE GENERATION
	https://axis.apache.org/axis2/java/core/tools/idea/Idea_plug-in_userguide.html
	

-------------
Run & Debug maven based project
https://vaadin.com/docs/v14/flow/tutorials/in-depth-course/project-setup
https://www.jetbrains.com/help/idea/run-debug-configuration-maven.html

------------------------
http://javadl.oracle.com/webapps/download/GetFile/1.8.0_121-b13/e9e7ea248e2c4826b92b3f075a80e441/windows-i586/jre1.8.0_121full.msi
https://sdlc-esd.oracle.com/ESD6/JSCDL/jre/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jre/jre1.8.0_121full.msi?GroupName=JSC&FilePath=/ESD6/JSCDL/jre/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jre/jre1.8.0_121full.msi&BHost=javadl.sun.com&File=jre1.8.0_121full.msi&AuthParam=1619084274_32693b2580f0c3d9a0c4900eeb8ed6b1&ext=.msi
-------------------------
archetypes
https://maven.apache.org/archetypes

------------------------
   json string to properities
   
   <dependency>
    <groupId>org.json</groupId>
    <artifactId>json</artifactId>
    <version>20180130</version>
</dependency>

   import java.util.Properties;
	import org.json.JSONObject;
	import org.json.Property;
   
   
   JSONObject jsonObject = new JSONObject("{\"phonetype\":\"N95\",\"cat\":\"WP\"}");
   
   
   Properties properties = new Properties();
      properties.put("title", "This is a title text");
      properties.put("subtitle", "This is a subtitle text");

      System.out.println("Properties to JSON");
      JSONObject jsonObject = Property.toJSONObject(properties);
      System.out.println(jsonObject);

      System.out.println("JSON to properties");
      System.out.println(Property.toProperties(jsonObject));
	  
	>>>>>> JSON <<<
	import org.json.simple.JSONObject;  
	import org.json.simple.JSONValue;  
	public class JsonDecodeExample1 {  
	public static void main(String[] args) {  
		String s="{\"name\":\"sonoo\",\"salary\":600000.0,\"age\":27}";  
		Object obj=JSONValue.parse(s);  
		JSONObject jsonObject = (JSONObject) obj;  
	  
		String name = (String) jsonObject.get("name");  
		double salary = (Double) jsonObject.get("salary");  
		long age = (Long) jsonObject.get("age");  
		System.out.println(name+" "+salary+" "+age);  
	}  
	}  

	String name = (String) jsonObject.get("name");  
	
	<dependency>  
    <groupId>com.googlecode.json-simple</groupId>  
    <artifactId>json-simple</artifactId>  
    <version>1.1</version>  
  </dependency>  
    >>>>>>>>>>>>>
--------------------------------
Response
Response.serverError()
          .status(Response.Status.BAD_REQUEST)
          .entity("Invalid nodeType of null. Valid node types are " + Arrays.toString(NodeType.values()))
          .build();
https://www.codota.com/code/java/methods/javax.ws.rs.core.Response/serverError

----------------------------
Jetty server install
https://www.eclipse.org/jetty/download.php

---------------------------------------------
Debug

	https://stackoverflow.com/questions/40703688/how-to-run-tomcat7-maven-plugin-in-debug-mode-with-intellij-idea

	Debug with Tomcat server

	1. define tomcat7 plugin in root pom
	   he tomcat7 plugin should be in both the build -> pluginManagement -> plugins section and build -> plugins -> plugin section like this:
	   >>>>>>>>>>>>>>>
	   <build>
			<pluginManagement>
				<plugins>
					<plugin>
						<groupId>org.apache.tomcat.maven</groupId>
						<artifactId>tomcat7-maven-plugin</artifactId>
						<version>2.2</version>
						<configuration>
							<warFile>target/in28minutes.war</warFile>
							<path>/</path>
							<contextReloadable>true</contextReloadable>
						</configuration>
					</plugin>
	   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	   <build>
			<plugins>
				<plugin>
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat7-maven-plugin</artifactId>
				</plugin>
			</plugins>
		NOTE: if this section is missing, then you cannot see tomcat7 plugin from maven tools window
		>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	2. View/Tool Windows/Maven
	3. Select root module from Maven tools window
	   a. clean   from lifecycle
	   b. install from lifecycle
	   c. debug from tomcat7:run from plugins 
----------------------------------------------------------
	What is "maven-shade-plugin" plugin?
	
	https://maven.apache.org/plugins/maven-shade-plugin/
	
	It's to package all dependeces and all resources from multiple moduels into one big Jar, which is called "uber-jar"
	
	https://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html
	Resource Transfoerms is used to 
		>>>>>>>>>>>>>>>>
		Aggregating classes/resources from several artifacts into one uber JAR is straight forward as long as there is no overlap. 
		Otherwise, some kind of logic to merge resources from several JARs is required. This is where resource transformers kick in.
		>>>>>>>>>>>>>>>>
------------------------------------------------------
 What is <build> <pluginManagement> <plugins>	?
 
 In case of parent pom, it defines to make childPom inherit plugin definition.