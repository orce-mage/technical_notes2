Docker Install
https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
sudo apt-get update
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io
sudo docker run hello-world

----------------------------------
sudo groupadd docker
sudo usermod -aG docker $USER
On Linux, you can also run the following command to activate the changes to groups:

$ newgrp docker
----------------------------------
Configure Docker to start on boot
	sudo systemctl enable docker
	sudo systemctl disable docker
-----------------------------------
Configuring remote access with systemd unit file
sudo systemctl edit docker.service
	[Service]
	ExecStart=
	ExecStart=/usr/bin/dockerd -H fd:// -H tcp://127.0.0.1:2375
sudo systemctl daemon-reload
sudo systemctl restart docker.service
sudo netstat -lntp | grep dockerd

Configuring remote access with daemon.json

-------------------------------------------------------------------------

1.
elastichsearch config 

sysctl -w vm.max_map_count=262144 
or
check sysctl vm.max_map_count

sudo nano /etc/sysctl.conf
vm.max_map_count=262144
vm.max_file_descriptors=262144

sudo nano ~/.profile
add the following into this file and then run the following command
source ~/.profile


docker-compose install
https://docs.docker.com/compose/install/
	a. sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	b. sudo chmod +x /usr/local/bin/docker-compose
	

docker-compose commands
https://docs.docker.com/compose/reference/start/
# use `dc` to start without `frontend` container
alias dc="docker-compose -f docker-compose.yml -f docker-compose.local.yml -f docker-compose.ssl.yml"

# use `dcf` to start with `frontend` container
alias dcf="docker-compose -f docker-compose.yml -f docker-compose.local.yml -f docker-compose.ssl.yml -f docker-compose.frontend.yml"

# use `inapp` to quickly get inside of the app container
alias inapp="docker-compose -f docker-compose.yml -f docker-compose.local.yml -f docker-compose.ssl.yml -f docker-compose.frontend.yml exec -u user app"

docker-compose -f docker-compose.yml -f docker-compose.local.yml -f docker-compose.ssl.yml -f docker-compose.frontend.yml exec -u root app bash

# use `infront` to quickly get inside of the frontend container
alias infront="docker-compose -f docker-compose.yml -f docker-compose.local.yml -f docker-compose.ssl.yml -f docker-compose.frontend.yml exec -w /var/www/public/app/design/frontend/Scandiweb/pwa/ frontend"

# use `applogs` to quickly see the last 100 lines of app container logs
alias applogs="docker-compose logs -f --tail=100 app"

# use `frontlogs` to quickly see the last 100 lines of frontend container logs
alias frontlogs="docker-compose -f docker-compose.yml -f docker-compose.local.yml -f docker-compose.ssl.yml -f docker-compose.frontend.yml logs -f --tail=100 frontend"

2. 
env | grep COMPOSER_AUTH
export COMPOSER_AUTH='{"http-basic":{"repo.magento.com": {"username": "faa0e4be60219d1d7dbfdb865c469b7e", "password": "babf0e55ee4c8f5d5c5176abdf90f8f8"}}}'

3. echo '127.0.0.1 scandipwa.local' | sudo tee -a /etc/hosts
4. git
ssh-keygen -t ed25519 -C "yanaivashkoweb@gmail.com"
eval $(ssh-agent -s)
ssh-add ~/.ssh/id_ed25519
5
	.git clone git@github.com:scandipwa/magento-docker.git
	git checkout magento-2.4.1
6
	sudo make cert
7.  Adding trusted root certificates to the server
    trust anchor opt/cert/scandipwa-ca.pem
	
	Copy your CA to dir /usr/local/share/ca-certificates/
	Use command: sudo cp foo.crt /usr/local/share/ca-certificates/foo.crt
	Update the CA store: sudo update-ca-certificates
	
8. dcf pull
dc up -d --remove-orphans
dc ps

 
9.  Sample Data
	dc stop app
	docker-compose exec mysql mysql -u root -pscandipwa -e "DROP DATABASE magento;CREATE DATABASE magento;"
	docker-compose exec mysql mysql -u root -pscandipwa -e "use calvo_cover_db;UPDATE core_config_data SET VALUE='http://157.175.95.222/' WHERE VALUE LIKE '%https://calvocover.com/%'"
	
	docker-compose exec -T mysql mysql -u root -pscandipwa magento < deploy/latest.sql
	docker-compose exec -T mysql mysql -u root -pscandipwa magento < deploy/latest.sql
	docker-compose exec -T mysql mysql -u root -pscandipwa calvo_cover_db < src/backup_dec_28_calvo.sql
	docker-compose exec -T mysql mysql -u root -pscandipwa calvo_cover_db < bdb.sql
	
	dc up -d --force-recreate
	docker-compose -f docker-compose.yml -f docker-compose.local.yml -f docker-compose.ssl.yml up -d --force-recreate
	
	select config_id,value,path from core_config_data where value like '%http%';
	 update core_config_data set value='http://vdev.store.calvocover.com/' where config_id IN(55,56);
	
	enter into the mode of docker like vagrant ssh
	inapp bash
	php bin/magento cache:status
	composer require scandipwa/sample-data
	magento setup:ugrade
	magento cache:flush
	
10 build
	php bin/magento scandipwa:theme:bootstrap Scandiweb/pwa
   npm ci && npm run build	
   
11
  /home/ubuntu/Projects/magento-docker/src/vendor/scandipwa/locale/src/Package/PackagePool.php :: 161 line
  if (!preg_match('/(' . implode($quotedKeysToFind, '|') . ')/i', $key)) {
  ===>>>
  if (!preg_match('/(' . implode('|', $quotedKeysToFind) . ')/i', $key)) {
  
12 locale issue 
	Not a bug, you need to
	1. change the src/config/webpack.production.config.js last line with translations you want  
	2. In i18n directory, add json file according to locale
		 ar_SA.json
	-------------------------
	https://medium.com/progressivewebapps/new-release-translations-cart-merging-default-country-config-support-in-scandipwa-2-7-b53007984b4b
	1.Go to your theme folder, for docker-setup it will be src/app/design/frontend/Scandiweb/pwa
	2.From there, go to src/app/config/webpack.production.config.js
	3. Scroll, to the very bottom, until you find such line:
			module.exports = mapTranslationsToConfig(['en_US'], webpackConfig);
			Append the array with locales you want to support.
	4. Now, notice i18n folder in theme folder, create the JSON files for your languages.
		(for example, for Russian, you need to create i18n/ru_RU.json
	5. Now, while inside of theme folder execute 
	   >> npm run extract-translations
	6. Open your newly created JSONs, notice translatable strings appeared there
	7. Translate generated strings (check our i18n folder, there might already be a necessary locale).
	8. Compile new bundles: 
	   >> npm run build
	9. Go to Magento store settings: Stores > Configuration > General > General > Locale Options > Locale, switch it to valid store
	10. Flush Magento cache (magento c:f or via admin panel)
	--------------------------------
	https://packagist.org/packages/scandipwa/locale
	The ScandiPWA is using different bundles per language. This module is here to handle bundle switching to the specified store language.

	Feature breakdown:
	1. Switches language per store

	Exposes $this->getStaticBundleFile() in generated Magento_Theme/templates/root.phtml. It does so from themes index.production.html - so find PHP source there.

	2. Adds helper to get static versioned files

	The $this->getStaticFile($url), where $url is relative to Magento_Theme folder (generated with npm run build) allows to pass generated files to it.

	3. Optimizes static-content deploy

	If theme is specified, the static-content deploy wont process all files. It decreases the processed file amount form 2k down to 20-30.

	This can be achieved using following command:

	magento setup:static-content:deploy -t Scandiweb/pwa

13  docker container remove
  docker-compose rm -v
  docker-compose down --rmi all -v --remove-orphans
  docker-compose down --rmi all -v
    
	---------------------
	image vs container
	
	image: sort of template, read-only
	container: instance of image: changes on top of image
	https://phoenixnap.com/kb/docker-image-vs-container
	
	pull: download or build the image
	up  : create the container and link it to image and start
	---------------------
	Notes when moving dockers
	opt should be copied or re-created
	---------------------
	docker image
	List:
		docker images -a
	Remove:
	    docker rmi Image Image
		docker rmi $(docker images -a -q) [remove all]
	docker container remove 
	    docker ps -a
		docker ps -a --format="container:{{.ID}} image:{{.Image}}"
		docker rm ID_or_Name ID_or_Name 
		docker rm $(docker ps -a -f status=exited -q) [remove all]
  
  https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes
  
   ---------------------
   How to go inside container in Docker
   1. Use docker ps to get the name of the existing container.
   2. Use the command docker exec -it <container name> /bin/bash to get a bash shell in the container.
   3. Or directly use docker exec -it <container name> <command> to execute whatever command you specify in the container.
   docker exec -it 10188edf8dad /bin/bash
   docker exec -it 917b9b625664 /bin/bash
   
   docker exec -it magento-docker_frontend_1 /bin/bash
   docker exec -it magento-docker_redis_1 /bin/bash
   
   ---------------------
   docker container dump
   docker cp <container ID>:<source_path> <destination_path>
   
   docker cp bf991795b7f0:/ nginx_dump/
   bf991795b7f0: container id
   
   --------------------------
   docker cp magento-docker_nginx_1:/etc/nginx/conf.d/cache-router.conf cache_router.conf
   docker cp magento-docker_nginx_1:/etc/nginx/conf.d/default.conf magento.conf
   
   docker cp temp.conf magento-docker_nginx_1:/etc/nginx/conf.d/cache-router.conf
   ---------------------------
   nginx:
    image: nginx:${NGINX_VERSION}
    restart: on-failure:30
    volumes:
      - ./deploy/shared/conf/nginx/magento.conf:/etc/nginx/conf.d/default.conf
	  
    it means magento.conf is sync with default.conf in container
  
14. The site does not open at all / loads forever  
https://docs.scandipwa.com/faq/installation#the-site-does-not-open-at-all-loads-forever
  Sometimes the nginx can not find varnish host. Execute following commands:
  dc restart nginx ssl-term
  dc restart varnish
  
  vendor/scandipwa/catalog-graphql/src/etc/di.xml
  <type name="Magento\Framework\GraphQl\Query\QueryComplexityLimiter">
        <arguments>
            <argument name="queryDepth" xsi:type="number">20</argument>
            <argument name="queryComplexity" xsi:type="number">800</argument>
        </arguments>
    </type>

  
15. Search does not work,  
https://docs.scandipwa.com/faq/installation#search-does-not-work-product-can-not-be-saved-can-not-complete-checkout-magento-throwing-indexer-handler-is-not-available
	docker-compose logs -f app
    docker-compose ps
    docker-compose logs -f elasticsearch	
16 varnish disable
  dc exec varnish varnishadm ban req.url "~ /"	
  varnishadm -n beta ban req.url "~ /"	
17 ar-SA language pack install
    composer require mageplaza/magento-2-arabic-language-pack:dev-master avada/module-proofo
	php bin/magento setup:static-content:deploy ar_SA
	php bin/magento indexer:reindex
	php bin/magento cache:clean
	php bin/magento cache:flush  
	
	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	./composer.json has been updated
	Loading composer repositories with package information
	Updating dependencies (including require-dev)
	Package operations: 3 installs, 0 updates, 0 removals
	As there is no 'unzip' command installed zip files are being unpacked using the PHP zip extension.
	This may cause invalid reports of corrupted archives. Besides, any UNIX permissions (e.g. executable) defined in the archives will be lost.
	Installing 'unzip' may remediate them.
	  - Installing mageplaza/module-core (1.4.10): Downloading (100%)
	  - Installing mageplaza/magento-2-arabic-language-pack (dev-master 43040e7): Cloning 43040e7c2c from cache
	  - Installing avada/module-proofo (1.0.4): Downloading (100%)
	Package container-interop/container-interop is abandoned, you should avoid using it. Use psr/container instead.
	Writing lock file
	Generating autoload files
	46 packages you are using are looking for funding.
	Use the `composer fund` command to find out more!
	
	/vendor/composer/autoload_files.php
		return array(
				 '6b5b87bda6fedcf6ef8605219c8b67f2' => $vendorDir . '/mageplaza/module-core/registration.php',
				 '6f9ea3bbd052477d54bfc87e527b0210' => $vendorDir . '/avada/module-proofo/registration.php',
				 '3909666b4bcab0d77890b23c904fc114' => $vendorDir . '/mageplaza/magento-2-arabic-language-pack/registration.php',
	/vendor/composer/autoload_psr4.php
		return array(
				'Mageplaza\\Core\\' => array($vendorDir . '/mageplaza/module-core')
	/vendor/composer/autoload_static.php
		public static $files
				'6f9ea3bbd052477d54bfc87e527b0210' => __DIR__ . '/..' . '/avada/module-proofo/registration.php',
				'6b5b87bda6fedcf6ef8605219c8b67f2' => __DIR__ . '/..' . '/mageplaza/module-core/registration.php',
				'3909666b4bcab0d77890b23c904fc114' => __DIR__ . '/..' . '/mageplaza/magento-2-arabic-language-pack/registration.php',
		public static $prefixLengthsPsr4
				'Mageplaza\\Core\\' => 15,
		public static $prefixDirsPsr4		
				'Mageplaza\\Core\\' => 
					array (
						0 => __DIR__ . '/..' . '/mageplaza/module-core',
					),


	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	-----------------------------------------
Docker php extension install

https://rollout.io/blog/using-docker-compose-for-php-development/
https://hub.docker.com/r/scandipwa/php/dockerfile

FROM php:7.4-fpm
RUN apt-get update && apt-get install -y \
        libicu-dev \
    && docker-php-ext-install \
        imagick \
    && docker-php-ext-enable \
        imagick
		
RUN apt-get update && apt-get install -y && docker-php-ext-install imagick && docker-php-ext-enable imagick
RUN apt-get update && apt-get install -y && apt install php-imagick
		
https://discuss.circleci.com/t/how-to-install-php-imagick-php-extension/19051/3
endit Dockerfile
   a. remove container 
       scandipwa:magento2.4.1
   b. remmove scandipwa:php image
RUN apt-get update && apt-get install -y \
    libmagickwand-dev --no-install-recommends \
    && pecl install imagick \
	&& docker-php-ext-enable imagick

	-------------------------------
	cron issue
	inapproot bash
	apt-get update
	apt-get install -y cron
	service cron status
	service cron start
	
---------------------
GraphQL playground HTTP HEADER

https://blog.logrocket.com/complete-guide-to-graphql-playground/

{
  "Authorization": "Bearer 6gopgtu4g242ajq68h9m4tjke1wmv5n9"
}

-----------------------------
Checkout GraphQL
https://devdocs.magento.com/guides/v2.4/graphql/tutorials/checkout/checkout-add-product-to-cart.html

-------------------------------
docker hang issue

  1. sudo systemctl disable docker
  2. reboot
      optional
        rm -rf /var/run/docker
	    rm /var/run/docker.*
  3. uninstall docker
	sudo apt-get purge docker-engine
	sudo apt-get autoremove --purge docker-engine
	rm -rf /var/lib/docker
  4. reboot
  5. sudo service docker start
  5. reinstall containers
     dcf pull
	 dc up -d --remove-orphans
	 ....

---------------------------------
amazon pay

https://github.com/RoboLV/scandipwa-amazon-pay