******************* ref url ******************

https://devdocs.magento.com/guides/v2.3/migration/migration-migrate-settings.html


------------------------------
auto script for extension conversion

https://github.com/unirgy/convertm1m2

Installation and Usage
The script is fully standalone and self-contained, with the exception of SimpleDOM.php library, which is included in the package.

Fork/clone the repository, and edit convert.php file configuration (at the beginning of the file) if/as necessary.

The script can be ran from the Web or CLI, and allows conversion of multiple extensions at the same time.

When running from the web, no parameters can be accepted, and the script expects these locations:

Magento 1: $mage1Dir = ../magento/ - this is required for fetching configurations and layouts. It should contain all core Magento modules, all the modules to be converted, and all their dependencies.

Source Modules: $sourceDir = source/ - Copy here your extensions to be converted, files for each extension in a separate folder, named the same as extensions.

Destination: $mage2Dir = ../magento2/ - The resulting converted extensions will be stored here, in magento2/app/code/*, for quick testing.

When running from CLI, the following parameters are accepted (all optional):

php convert.php s=source m=mage1_folder o=output a=stage

php convert.php s=source m="../daniel_m1_lcarb_shop" o="../daniel_m2_lcarb_shop" a=1

An example of file and folders structure:

[] Web or CLI root
|
+-[] convertm1m2/
| +-() convert.php   - execute this script
| +-[] source/
|   +-[] Vendor_Module1/ - here are all the original files of your Magento1 extension, with full folder structure
|   +-[] Vendor_Module2/
|     +-[] app/code/community/Vendor/Module2/...
|     +-[] app/etc/modules/Vendor_Module2.xml
|     +-[] skin/frontend/base/default/...
|
+-[] magento/           - Magento 1 root folder with all core code, extensions to be converted, and dependencies
| +-[] app/
| +-[] skin/
| +-[] ...
|
+-[] magento2/          - Magento 2 root folder
| +-[] app/
|   +-[] code/
|     +-[] Vendor/
|       +-[] Module1/   - here are the resulting output files of the converted extension
|       +-[] Module2/
Steps after automatic conversion
Run stage 2 to check that classes can be loaded by php without errors
http://127.0.0.1/convertm1m2/convert.php?a=2 OR
$ php convert.php a=2
Fix any parent or interface classes as these could have been changed
Fix any constructors or other methods arguments as they might have been changed
Go over all the output files and try to understand what they mean and how they map to respective functionality in M1 code.
Manually convert CSS, JS and templates to support M2 themes.
Test your extensions.
Learn more about M2 and use the knowledge to improve your code and gain experience.